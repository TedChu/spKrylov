#stat_smooth(method = "lm", formula = y ~ poly(x, 3), size = 1,color="blue")+
#stat_poly_eq(formula = y ~ poly(x, 3),
#             aes(label = ..eq.label..),
#             parse = TRUE,color="blue")+
theme_bw()
dat2019nCov <- dat[1:7,]
x0 = 1:length(y) - 1
polydeg = 3
fit <- lm(y ~ poly(x0,polydeg,raw = T),data = dat2019nCov)
summary(fit)
polydeg = 2
fit <- lm(y ~ poly(x0,polydeg,raw = T),data = dat2019nCov)
summary(fit)
ggplot(dat,aes(x,y))+
geom_point(color="black",size=3)+
xlim(x[1],x[1]+12)+
ylim(0,30000)+
stat_smooth(data = dat[1:7,], aes(x,y),method = "lm", formula = y ~ poly(x, 2), size = 1,color="orange",fullrange = T,fill="lightorange",se=F)+
stat_smooth(data = dat[1:8,], aes(x,y),method = "lm", formula = y ~ poly(x, polydeg), size = 1,color="darkgreen",fullrange = T,fill="lightgreen")+
stat_smooth(data = dat[1:9,], aes(x,y),method = "lm", formula = y ~ poly(x, polydeg), size = 1,color="blue",fullrange = T,fill="lightblue",se=F)+
stat_smooth(data = dat[1:10,], aes(x,y),method = "lm", formula = y ~ poly(x, 2), size = 1,color="red",fullrange = T,fill="red",se=F)+
#stat_poly_eq(formula = y ~ poly(x, 2),
#             aes(label = ..eq.label..),
#             parse = TRUE,color="darkgreen")+
#annotate("text",
#         x = mean(dat2019nCov$x),
#         y = max(dat2019nCov$y),
#         label = paste0("y=",polyexp))+
#stat_smooth(method = "lm", formula = y ~ poly(x, 3), size = 1,color="blue")+
#stat_poly_eq(formula = y ~ poly(x, 3),
#             aes(label = ..eq.label..),
#             parse = TRUE,color="blue")+
theme_bw()
dat
ggplot(dat,aes(x,y))+
geom_point(color="black",size=3)+
xlim(x[1],x[1]+12)+
ylim(0,30000)+
stat_smooth(data = dat[1:7,], aes(x,y),method = "lm", formula = y ~ poly(x, 2), size = 1,color="orange",fullrange = T,fill="lightorange",se=F)+
stat_smooth(data = dat[1:8,], aes(x,y),method = "lm", formula = y ~ poly(x, polydeg), size = 1,color="darkgreen",fullrange = T,fill="lightgreen")+
stat_smooth(data = dat[1:9,], aes(x,y),method = "lm", formula = y ~ poly(x, polydeg), size = 1,color="blue",fullrange = T,fill="lightblue",se=F)+
stat_smooth(data = dat[1:10,], aes(x,y),method = "lm", formula = y ~ poly(x, 2), size = 1,color="red",fullrange = T,fill="red",se=F)+
#stat_poly_eq(formula = y ~ poly(x, 2),
#             aes(label = ..eq.label..),
#             parse = TRUE,color="darkgreen")+
#annotate("text",
#         x = mean(dat2019nCov$x),
#         y = max(dat2019nCov$y),
#         label = paste0("y=",polyexp))+
#stat_smooth(method = "lm", formula = y ~ poly(x, 3), size = 1,color="blue")+
#stat_poly_eq(formula = y ~ poly(x, 3),
#             aes(label = ..eq.label..),
#             parse = TRUE,color="blue")+
theme_bw()
ggplot(dat,aes(x,y))+
geom_point(color="black",size=3)+
xlim(x[1],x[1]+12)+
ylim(0,30000)+
#stat_smooth(data = dat[1:7,], aes(x,y),method = "lm", formula = y ~ poly(x, 2), size = 1,color="orange",fullrange = T,fill="lightorange",se=F)+
stat_smooth(data = dat[1:8,], aes(x,y),method = "lm", formula = y ~ poly(x, polydeg), size = 1,color="darkgreen",fullrange = T,fill="lightgreen")+
stat_smooth(data = dat[1:9,], aes(x,y),method = "lm", formula = y ~ poly(x, polydeg), size = 1,color="blue",fullrange = T,fill="lightblue",se=F)+
stat_smooth(data = dat[1:10,], aes(x,y),method = "lm", formula = y ~ poly(x, 2), size = 1,color="red",fullrange = T,fill="red",se=F)+
#stat_poly_eq(formula = y ~ poly(x, 2),
#             aes(label = ..eq.label..),
#             parse = TRUE,color="darkgreen")+
#annotate("text",
#         x = mean(dat2019nCov$x),
#         y = max(dat2019nCov$y),
#         label = paste0("y=",polyexp))+
#stat_smooth(method = "lm", formula = y ~ poly(x, 3), size = 1,color="blue")+
#stat_poly_eq(formula = y ~ poly(x, 3),
#             aes(label = ..eq.label..),
#             parse = TRUE,color="blue")+
theme_bw()
y <- c(291,440,571,830,1287,1975,2744,4515,5974,7711)
x <- as.Date(c("2020-01-20")) + 0:9
library(ggplot2)
library(ggpmisc)
library(dplyr)
library(stringr)
dat <- data.frame(x=x,y=y,x0=1:length(y) - 1)
dat2019nCov <- dat[1:7,]
x0 = 1:length(y) - 1
polydeg = 2
fit <- lm(y ~ poly(x0,polydeg,raw = T),data = dat2019nCov)
summary(fit)
coeffs <- coefficients(fit)
predict(fit,data.frame(x0=9))
polyexp = gsub("+-","-",c(paste(paste0(round(coeffs),c("","x","x^2","x^3")),collapse = "+")),fixed = T)
ggplot(dat,aes(x,y))+
geom_point(color="black",size=3)+
xlim(x[1],x[1]+12)+
ylim(0,30000)+
#stat_smooth(data = dat[1:7,], aes(x,y),method = "lm", formula = y ~ poly(x, 2), size = 1,color="orange",fullrange = T,fill="lightorange",se=F)+
stat_smooth(data = dat[1:8,], aes(x,y),method = "lm", formula = y ~ poly(x, polydeg), size = 1,color="darkgreen",fullrange = T,fill="lightgreen")+
stat_smooth(data = dat[1:9,], aes(x,y),method = "lm", formula = y ~ poly(x, polydeg), size = 1,color="blue",fullrange = T,fill="lightblue",se=F)+
stat_smooth(data = dat[1:10,], aes(x,y),method = "lm", formula = y ~ poly(x, 2), size = 1,color="red",fullrange = T,fill="red",se=F)+
#stat_poly_eq(formula = y ~ poly(x, 2),
#             aes(label = ..eq.label..),
#             parse = TRUE,color="darkgreen")+
#annotate("text",
#         x = mean(dat2019nCov$x),
#         y = max(dat2019nCov$y),
#         label = paste0("y=",polyexp))+
#stat_smooth(method = "lm", formula = y ~ poly(x, 3), size = 1,color="blue")+
#stat_poly_eq(formula = y ~ poly(x, 3),
#             aes(label = ..eq.label..),
#             parse = TRUE,color="blue")+
theme_bw()
ggplot(dat,aes(x,y))+
geom_point(color="black",size=3)+
xlim(x[1],x[1]+12)+
ylim(0,30000)+
stat_smooth(data = dat[1:8,], aes(x,y),method = "lm", formula = y ~ poly(x, polydeg), size = 1,color="darkgreen",fullrange = T,fill="lightgreen",se=F)+
stat_smooth(data = dat[1:9,], aes(x,y),method = "lm", formula = y ~ poly(x, polydeg), size = 1,color="red",fullrange = T,fill="pink",se=F)+
stat_smooth(data = dat[1:10,], aes(x,y),method = "lm", formula = y ~ poly(x, polydeg), size = 1,color="blue",fullrange = T,fill="lightblue",se=F)+
#stat_poly_eq(formula = y ~ poly(x, 2),
#             aes(label = ..eq.label..),
#             parse = TRUE,color="darkgreen")+
#annotate("text",
#         x = mean(dat2019nCov$x),
#         y = max(dat2019nCov$y),
#         label = paste0("y=",polyexp))+
#stat_smooth(method = "lm", formula = y ~ poly(x, 3), size = 1,color="blue")+
#stat_poly_eq(formula = y ~ poly(x, 3),
#             aes(label = ..eq.label..),
#             parse = TRUE,color="blue")+
theme_bw()
fit <- lm(y ~ poly(x0,polydeg,raw = T),data = dat2019nCov)
summary(fit)
polydeg = 3
fit <- lm(y ~ poly(x0,polydeg,raw = T),data = dat2019nCov)
summary(fit)
coeffs <- coefficients(fit)
predict(fit,data.frame(x0=9))
polyexp = gsub("+-","-",c(paste(paste0(round(coeffs),c("","x","x^2","x^3")),collapse = "+")),fixed = T)
ggplot(dat,aes(x,y))+
geom_point(color="black",size=3)+
xlim(x[1],x[1]+12)+
ylim(0,30000)+
#stat_smooth(data = dat[1:7,], aes(x,y),method = "lm", formula = y ~ poly(x, 2), size = 1,color="orange",fullrange = T,fill="lightorange",se=F)+
stat_smooth(data = dat[1:8,], aes(x,y),method = "lm", formula = y ~ poly(x, polydeg), size = 1,color="darkgreen",fullrange = T,fill="lightgreen")+
stat_smooth(data = dat[1:9,], aes(x,y),method = "lm", formula = y ~ poly(x, polydeg), size = 1,color="blue",fullrange = T,fill="lightblue",se=F)+
stat_smooth(data = dat[1:10,], aes(x,y),method = "lm", formula = y ~ poly(x, 2), size = 1,color="red",fullrange = T,fill="red",se=F)+
#stat_poly_eq(formula = y ~ poly(x, 2),
#             aes(label = ..eq.label..),
#             parse = TRUE,color="darkgreen")+
#annotate("text",
#         x = mean(dat2019nCov$x),
#         y = max(dat2019nCov$y),
#         label = paste0("y=",polyexp))+
#stat_smooth(method = "lm", formula = y ~ poly(x, 3), size = 1,color="blue")+
#stat_poly_eq(formula = y ~ poly(x, 3),
#             aes(label = ..eq.label..),
#             parse = TRUE,color="blue")+
theme_bw()
ggplot(dat,aes(x,y))+
geom_point(color="black",size=3)+
xlim(x[1],x[1]+12)+
ylim(0,30000)+
stat_smooth(data = dat[1:7,], aes(x,y),method = "lm", formula = y ~ poly(x, 2), size = 1,color="orange",fullrange = T,fill="lightorange",se=F)+
stat_smooth(data = dat[1:8,], aes(x,y),method = "lm", formula = y ~ poly(x, polydeg), size = 1,color="darkgreen",fullrange = T,fill="lightgreen")+
stat_smooth(data = dat[1:9,], aes(x,y),method = "lm", formula = y ~ poly(x, polydeg), size = 1,color="blue",fullrange = T,fill="lightblue",se=F)+
stat_smooth(data = dat[1:10,], aes(x,y),method = "lm", formula = y ~ poly(x, 2), size = 1,color="red",fullrange = T,fill="red",se=F)+
#stat_poly_eq(formula = y ~ poly(x, 2),
#             aes(label = ..eq.label..),
#             parse = TRUE,color="darkgreen")+
#annotate("text",
#         x = mean(dat2019nCov$x),
#         y = max(dat2019nCov$y),
#         label = paste0("y=",polyexp))+
#stat_smooth(method = "lm", formula = y ~ poly(x, 3), size = 1,color="blue")+
#stat_poly_eq(formula = y ~ poly(x, 3),
#             aes(label = ..eq.label..),
#             parse = TRUE,color="blue")+
theme_bw()
ggplot(dat,aes(x,y))+
geom_point(color="black",size=3)+
xlim(x[1],x[1]+12)+
ylim(0,30000)+
stat_smooth(data = dat[1:7,], aes(x,y),method = "lm", formula = y ~ poly(x, 2), size = 1,color="orange",fullrange = T,fill="lightorange",se=T)+
stat_smooth(data = dat[1:8,], aes(x,y),method = "lm", formula = y ~ poly(x, polydeg), size = 1,color="darkgreen",fullrange = T,fill="lightgreen")+
stat_smooth(data = dat[1:9,], aes(x,y),method = "lm", formula = y ~ poly(x, polydeg), size = 1,color="blue",fullrange = T,fill="lightblue",se=F)+
stat_smooth(data = dat[1:10,], aes(x,y),method = "lm", formula = y ~ poly(x, 2), size = 1,color="red",fullrange = T,fill="red",se=F)+
#stat_poly_eq(formula = y ~ poly(x, 2),
#             aes(label = ..eq.label..),
#             parse = TRUE,color="darkgreen")+
#annotate("text",
#         x = mean(dat2019nCov$x),
#         y = max(dat2019nCov$y),
#         label = paste0("y=",polyexp))+
#stat_smooth(method = "lm", formula = y ~ poly(x, 3), size = 1,color="blue")+
#stat_poly_eq(formula = y ~ poly(x, 3),
#             aes(label = ..eq.label..),
#             parse = TRUE,color="blue")+
theme_bw()
ggplot(dat,aes(x,y))+
geom_point(color="black",size=3)+
xlim(x[1],x[1]+12)+
ylim(0,30000)+
stat_smooth(data = dat[1:7,], aes(x,y),method = "lm", formula = y ~ poly(x, 2), size = 1,color="orange",fullrange = T,fill="lightyellow",se=T)+
stat_smooth(data = dat[1:8,], aes(x,y),method = "lm", formula = y ~ poly(x, polydeg), size = 1,color="darkgreen",fullrange = T,fill="lightgreen")+
stat_smooth(data = dat[1:9,], aes(x,y),method = "lm", formula = y ~ poly(x, polydeg), size = 1,color="blue",fullrange = T,fill="lightblue",se=F)+
stat_smooth(data = dat[1:10,], aes(x,y),method = "lm", formula = y ~ poly(x, 2), size = 1,color="red",fullrange = T,fill="red",se=F)+
#stat_poly_eq(formula = y ~ poly(x, 2),
#             aes(label = ..eq.label..),
#             parse = TRUE,color="darkgreen")+
#annotate("text",
#         x = mean(dat2019nCov$x),
#         y = max(dat2019nCov$y),
#         label = paste0("y=",polyexp))+
#stat_smooth(method = "lm", formula = y ~ poly(x, 3), size = 1,color="blue")+
#stat_poly_eq(formula = y ~ poly(x, 3),
#             aes(label = ..eq.label..),
#             parse = TRUE,color="blue")+
theme_bw()
ggplot(dat,aes(x,y))+
geom_point(color="black",size=3)+
xlim(x[1],x[1]+12)+
ylim(0,30000)+
stat_smooth(data = dat[1:7,], aes(x,y),method = "lm", formula = y ~ poly(x, 2), size = 1,color="orange",fullrange = T,se=T)+
stat_smooth(data = dat[1:8,], aes(x,y),method = "lm", formula = y ~ poly(x, polydeg), size = 1,color="darkgreen",fullrange = T,fill="lightgreen")+
stat_smooth(data = dat[1:9,], aes(x,y),method = "lm", formula = y ~ poly(x, polydeg), size = 1,color="blue",fullrange = T,fill="lightblue",se=F)+
stat_smooth(data = dat[1:10,], aes(x,y),method = "lm", formula = y ~ poly(x, 2), size = 1,color="red",fullrange = T,fill="red",se=F)+
#stat_poly_eq(formula = y ~ poly(x, 2),
#             aes(label = ..eq.label..),
#             parse = TRUE,color="darkgreen")+
#annotate("text",
#         x = mean(dat2019nCov$x),
#         y = max(dat2019nCov$y),
#         label = paste0("y=",polyexp))+
#stat_smooth(method = "lm", formula = y ~ poly(x, 3), size = 1,color="blue")+
#stat_poly_eq(formula = y ~ poly(x, 3),
#             aes(label = ..eq.label..),
#             parse = TRUE,color="blue")+
theme_bw()
ggplot(dat,aes(x,y))+
geom_point(color="black",size=3)+
xlim(x[1],x[1]+12)+
ylim(0,30000)+
stat_smooth(data = dat[1:7,], aes(x,y),method = "lm", formula = y ~ poly(x, 2), size = 1,color="orange",fullrange = T,se=T)+
stat_smooth(data = dat[1:8,], aes(x,y),method = "lm", formula = y ~ poly(x, polydeg), size = 1,color="darkgreen",fullrange = T,fill="lightgreen")+
stat_smooth(data = dat[1:9,], aes(x,y),method = "lm", formula = y ~ poly(x, polydeg), size = 1,color="blue",fullrange = T,fill="lightblue",se=T)+
stat_smooth(data = dat[1:10,], aes(x,y),method = "lm", formula = y ~ poly(x, 2), size = 1,color="red",fullrange = T,fill="red",se=F)+
#stat_poly_eq(formula = y ~ poly(x, 2),
#             aes(label = ..eq.label..),
#             parse = TRUE,color="darkgreen")+
#annotate("text",
#         x = mean(dat2019nCov$x),
#         y = max(dat2019nCov$y),
#         label = paste0("y=",polyexp))+
#stat_smooth(method = "lm", formula = y ~ poly(x, 3), size = 1,color="blue")+
#stat_poly_eq(formula = y ~ poly(x, 3),
#             aes(label = ..eq.label..),
#             parse = TRUE,color="blue")+
theme_bw()
ggplot(dat,aes(x,y))+
geom_point(color="black",size=3)+
xlim(x[1],x[1]+12)+
ylim(0,30000)+
stat_smooth(data = dat[1:7,], aes(x,y),method = "lm", formula = y ~ poly(x, 2), size = 1,color="orange",fullrange = T,se=T)+
stat_smooth(data = dat[1:8,], aes(x,y),method = "lm", formula = y ~ poly(x, polydeg), size = 1,color="darkgreen",fullrange = T,fill="lightgreen",se=F)+
stat_smooth(data = dat[1:9,], aes(x,y),method = "lm", formula = y ~ poly(x, polydeg), size = 1,color="blue",fullrange = T,fill="lightblue",se=T)+
stat_smooth(data = dat[1:10,], aes(x,y),method = "lm", formula = y ~ poly(x, 2), size = 1,color="red",fullrange = T,fill="red",se=F)+
#stat_poly_eq(formula = y ~ poly(x, 2),
#             aes(label = ..eq.label..),
#             parse = TRUE,color="darkgreen")+
#annotate("text",
#         x = mean(dat2019nCov$x),
#         y = max(dat2019nCov$y),
#         label = paste0("y=",polyexp))+
#stat_smooth(method = "lm", formula = y ~ poly(x, 3), size = 1,color="blue")+
#stat_poly_eq(formula = y ~ poly(x, 3),
#             aes(label = ..eq.label..),
#             parse = TRUE,color="blue")+
theme_bw()
ggplot(dat,aes(x,y))+
geom_point(color="black",size=3)+
xlim(x[1],x[1]+12)+
ylim(0,30000)+
#stat_smooth(data = dat[1:7,], aes(x,y),method = "lm", formula = y ~ poly(x, 2), size = 1,color="orange",fullrange = T,se=T)+
stat_smooth(data = dat[1:8,], aes(x,y),method = "lm", formula = y ~ poly(x, polydeg), size = 1,color="darkgreen",fullrange = T,fill="lightgreen",se=F)+
stat_smooth(data = dat[1:9,], aes(x,y),method = "lm", formula = y ~ poly(x, polydeg), size = 1,color="blue",fullrange = T,fill="lightblue",se=F)+
stat_smooth(data = dat[1:10,], aes(x,y),method = "lm", formula = y ~ poly(x, 2), size = 1,color="red",fullrange = T,fill="red",se=T)+
#stat_poly_eq(formula = y ~ poly(x, 2),
#             aes(label = ..eq.label..),
#             parse = TRUE,color="darkgreen")+
#annotate("text",
#         x = mean(dat2019nCov$x),
#         y = max(dat2019nCov$y),
#         label = paste0("y=",polyexp))+
#stat_smooth(method = "lm", formula = y ~ poly(x, 3), size = 1,color="blue")+
#stat_poly_eq(formula = y ~ poly(x, 3),
#             aes(label = ..eq.label..),
#             parse = TRUE,color="blue")+
theme_bw()
x0 = 1:length(y) - 1
polydeg = 3
fit <- lm(y ~ poly(x0,2,raw = T),data = dat2019nCov)
summary(fit)
coeffs <- coefficients(fit)
predict(fit,data.frame(x0=10))
predict(fit,data.frame(x0=10),se=T)
predict(fit,data.frame(x0=10),interval = "predict")
x0
y
y <- c(291,440,571,830,1287,1975,2744,4515,5974,7711)
x <- as.Date(c("2020-01-20")) + 0:9
library(ggplot2)
library(ggpmisc)
library(dplyr)
library(stringr)
dat <- data.frame(x=x,y=y,x0=1:length(y) - 1)
dat2019nCov
x0 = 1:length(y) - 1
polydeg = 3
fit <- lm(y ~ poly(x0,2,raw = T),data = dat)
summary(fit)
coeffs <- coefficients(fit)
predict(fit,data.frame(x0=10),interval = "predict")
fit <- lm(y ~ poly(x0,2,raw = T),data = dat[1:9,])
summary(fit)
coeffs <- coefficients(fit)
fit <- lm(y ~ poly(x0,3,raw = T),data = dat[1:9,])
summary(fit)
coeffs <- coefficients(fit)
predict(fit,data.frame(x0=10),interval = "predict")
predict(fit,data.frame(x0=9),interval = "predict")
fit <- lm(y ~ poly(x0,3,raw = T),data = dat[1:8,])
summary(fit)
coeffs <- coefficients(fit)
predict(fit,data.frame(x0=9),interval = "predict")
fit <- lm(y ~ poly(x0,3,raw = T),data = dat[1:9,])
fit <- lm(y ~ poly(x0,3,raw = T),data = dat[1:9,])
summary(fit)
coeffs <- coefficients(fit)
predict(fit,data.frame(x0=10),interval = "predict")
fit <- lm(y ~ poly(x0,3,raw = T),data = dat)
summary(fit)
coeffs <- coefficients(fit)
predict(fit,data.frame(x0=10),interval = "predict")
fit <- lm(y ~ poly(x0,2,raw = T),data = dat)
summary(fit)
coeffs <- coefficients(fit)
predict(fit,data.frame(x0=10),interval = "predict")
data1 <- read.table("/Volumes/JIALUO/STAA553/course_files_export/Lecture 2 Oneway model/oneway.txt",header = T)
attach(data1)
names(data1)
data1
plot(drywt~trt)
g <- lm(drywt ~ trt)
summary(g)
abline(coef(g))
plot(drywt~factor(trt))
trt <- factor(trt)
trt <- factor(trt)
g <- lm(drywt~trt)
summary(g)
model.matrix(g)
contrasts(trt)
g <- lm(drywt~trt -1)
model.matrix(g)
options(contrasts = c("contr.treatment", "contr.poly"))
g <- lm(drywt~trt)
model.matrix(g)
options(contrasts = c("contr.SAS", "contr.poly"))
g <- lm(drywt~trt)
model.matrix(g)
options(contrasts = c("contr.helmert", "contr.poly"))
g <- lm(drywt~trt)
model.matrix(g)
options(contrasts = c("contr.sum", "contr.poly"))
g <- lm(drywt~trt)
model.matrix(g)
options(contrasts = c("contr.SAS", "contr.poly"))
g <- lm(drywt~trt)
contrasts(trt)
?contrasts
contr.poly(3)
contr.treatment(3)
contr.SAS(3)
contr.sum(3)
contr.poly(3)
contr.helmert(3)
contrasts(trt) <- cbind(c(2,-1,-1)/3,c(0,0.5,-0.5))
contrasts(trt) <- cbind(c(2,-1,-1)/3,c(0,0.5,-0.5))
g <- lm(drywt~trt)
model.matrix(g)
confint(g,level = 0.95)
summary(g)
trt <- ordered(trt)
g <- lm(drywt~trt)
model.matrix(g)
# Confidence intervals for individual means
g <- lm(drywt~trt -1)
confint(g,level=0.95) # t-based CI's for lm objects
# Comparing all pairs of individual means
mn <- tapply(drywt,trt,mean)   #computes a table of means
barplot(mn,xlab="trt",ylab="drywt")
pairwise.t.test(drywt,trt, p.adjust.method="none")  # does not use the model
# Confidence intervals for contrasts the hard way: compare trt 1 to the average of trt 2 and trt 3.
c <- c(1,-0.5,-0.5)
est <- t(c)%*%coef(g)
se.c <- sqrt(t(c)%*%vcov(g)%*%c)
tval <- qt(0.975,df.residual(g))
lcl <- est-tval*se.c
ucl <- est+tval*se.c
est
lcl
ucl
tmp <- round(c(est,lcl,ucl))
colnames(tmp) = c("estimate","lower","upper")
names(tmp) = c("estimate","lower","upper")
tmp
tmp <- round(c(est,lcl,ucl),3)
names(tmp) = c("estimate","lower","upper")
tmp
c <- c(1,-0.5,-0.5)
est <- t(c)%*%coef(g)
se.c <- sqrt(t(c)%*%vcov(g)%*%c)
tval <- qt(0.975,df.residual(g))
lcl <- est-tval*se.c
ucl <- est+tval*se.c
tmp <- round(c(est,lcl,ucl),3)
names(tmp) = c("estimate","lower","upper")
tmp
options(contrasts = c("contr.SAS", "contr.poly"))
g <- lm(drywt~trt)
summary(g)
trt <- factor(trt)
options(contrasts = c("contr.SAS", "contr.poly"))
g <- lm(drywt~trt)
summary(g)
data1 <- read.table("/Volumes/JIALUO/STAA553/course_files_export/Lecture 2 Oneway model/oneway.txt",header = T)
options(contrasts = c("contr.SAS", "contr.poly"))
g <- lm(drywt~trt,data1)
summary(g)
data1$trt <- factor(trt)
options(contrasts = c("contr.SAS", "contr.poly"))
g <- lm(drywt~trt,data1)
summary(g)
options(contrasts = c("contr.treatment", "contr.poly"))
g <- lm(drywt~trt)
model.matrix(g)
summary(g)
data1 <- read.table("/Volumes/JIALUO/STAA553/course_files_export/Lecture 2 Oneway model/oneway.txt",header = T)
attach(data1)
detach(data1)
detach(data1)
detach(data1)
data1 <- read.table("/Volumes/JIALUO/STAA553/course_files_export/Lecture 2 Oneway model/oneway.txt",header = T)
names(data1)
data1$trt <- factor(trt)
g <- lm(drywt~trt,data1)
summary(g)
options(contrasts = c("contr.SAS", "contr.poly"))
g <- lm(drywt~trt,data1)
summary(g)
options(contrasts = c("contr.treatment", "contr.poly"))
g <- lm(drywt~trt)
summary(g)
options(contrasts = c("contr.treatment", "contr.poly"))
g <- lm(drywt~trt,data1)
summary(g)
options(contrasts = c("contr.treatment", "contr.poly"))
g <- lm(drywt~trt,data1)
str(data1)
data1 <- read.table("/Volumes/JIALUO/STAA553/course_files_export/Lecture 2 Oneway model/oneway.txt",header = T)
data1$trt <- factor(trt)
str(data1)
data1 <- read.table("/Volumes/JIALUO/STAA553/course_files_export/Lecture 2 Oneway model/oneway.txt",header = T)
data1$trt <- as.factor(trt)
str(data1$trt)
data1 <- read.table("/Volumes/JIALUO/STAA553/course_files_export/Lecture 2 Oneway model/oneway.txt",header = T)
data1$trt <- as.factor(as.character(trt))
str(data1)
g <- lm(drywt~trt -1)
model.matrix(g)
options(contrasts = c("contr.treatment", "contr.poly"))
g <- lm(drywt~trt -1,data1)
model.matrix(g)
options(contrasts = c("contr.treatment", "contr.poly"))
g <- lm(drywt~trt,data1)
summary(g)
model.matrix(g)
options(contrasts = c("contr.SAS", "contr.poly"))
g <- lm(drywt~trt,data1)
summary(g)
1200 - (87958-75000)/20
1783+187.56/3
ls()
# sudo R CMD javareconf
#dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
# sudo R CMD javareconf
#install.packages("rJava")
library(xlsx)
library(dplyr)
wrk.dir <- "/Users/lolofter/Desktop/hu/"
setwd(dir)
file.ls <- list.files(path = dir,pattern = ".xlsx$")
?loadWorkbook
?getSheets
library(spKrylov)
?krylov_mle
roxygen2::roxygenise()
setwd("/Volumes/JIALUO/krylov_jcgs/revision/spKrylov")
roxygen2::roxygenise()
devtools::document()
install.packages("roxygen2")
install.packages("roxygen2")
devtools::load_all()
devtools::document()
